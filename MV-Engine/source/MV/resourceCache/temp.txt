namespace mv
{
	template <class T, class = std::enable_if_t<std::is_base_of<T,sf::Texture>::value /*|| std::is_base_of<T, sf::Music>::value*/>>
	class Cache
	{
	public:
		T& get(std::string& path);
	private:
		static std::map<std::string, T> resources;
	};
	
}
//.cpp
#include "Cache.hpp"

namespace mv
{
//	template<class T, class = std::enable_if_t<std::is_base_of<T, sf::Texture>::value>
	template<class T>
	T & Cache<T,class>::get(std::string & path)
	{
		if (path.empty())
		{
			throw invalid_argument("Cache can't find resource in empty path.");
		}

		{//Try find resource
			auto result = resources.find(path);

			if (result != resources.end())
				return &result;
		}

		{//Try to load it
			T resource;

			if (!resource.loadFromFile(path))
			{
				throw invalid_argument("Cache can't find resource in this path.");
			}

			resoruces.emplace_back(path, resource);

			return &resources[path];
		}
	}
}

//template<class T>
//T& Cache<T>::get(std::string& path)
//{
//	if (path.empty())
//	{
//		throw invalid_argument("Cache can't find resource in empty path.");
//	}

//	{//Try find resource
//		auto result = resources.find(path);

//		if (result != resources.end())
//			return &result;	
//	}

//	{//Try to load it
//		T resource;

//		if (!resource.loadFromFile(path))
//		{
//			throw invalid_argument("Cache can't find resource in this path.");
//		}

//		resoruces.emplace_back(path,resource);

//		return &resources[path];
//	}
//}
